import os
import json
from crewai import Agent, Crew, Task, LLM
from dotenv import load_dotenv
from tools import run_rag, load_json_file  # โ ุฃุฏูุงุช ุชุญููู ุงูุจูุงูุงุช ูู ุงููุชุจ ูุงููุฎุฒู

# โ ุชุญููู ูุชุบูุฑุงุช ุงูุจูุฆุฉ
load_dotenv()

# ๐น Set API Keys
os.environ["OPENAI_API_KEY"] = "66e99044-a4d8-4a6c-aacd-68f0546ccbca"
os.environ["OPENAI_API_BASE"] = "https://api.sambanova.ai/v1"
os.environ["OPENAI_MODEL_NAME"] = "sambanova/Meta-Llama-3.3-70B-Instruct"


llm = LLM(
    model=os.environ["OPENAI_MODEL_NAME"],
    temperature=0.4,
    api_key=os.environ["OPENAI_API_KEY"],
    base_url=os.environ["OPENAI_API_BASE"]
)

### โ ุฅูุดุงุก ุงููููุงุก (Agents)

# ๐น ูููู 1: ุฌูุจ ุงููุนูููุงุช ุงูุบุฐุงุฆูุฉ ูู ุงููุชุจ ๐
def create_food_info_agent():
    return Agent(
        role="Food Expert",
        goal="ุงุณุชุฎุฑุงุฌ ุงููุนูููุงุช ุงูุบุฐุงุฆูุฉ ูุงูุณุนุฑุงุช ุงูุญุฑุงุฑูุฉ ูู ุงููุชุจ ุจุงุณุชุฎุฏุงู RAG.",
        backstory="ุฎุจูุฑ ุชุบุฐูุฉ ูุชุฎุตุต ูู ุชุญููู ุงูุจูุงูุงุช ุงูุบุฐุงุฆูุฉ ูู ุงููุชุจ ูุงููุตุงุฏุฑ ุงูุนูููุฉ ุจุงุณุชุฎุฏุงู ุงูุฐูุงุก ุงูุงุตุทูุงุนู.",
        verbose=True,
        memory=True,
        tools=[run_rag]
    )

# ๐น ูููู 2: ุฅุนุฏุงุฏ ุงููุธุงู ุงูุบุฐุงุฆู ุจูุงุกู ุนูู ุงููุฎุฒูู ูุงูุณุนุฑุงุช ุงูุญุฑุงุฑูุฉ ๐
def create_meal_planner_agent():
    return Agent(
        role="Diet Planner",
        goal="ุฅูุดุงุก ูุธุงู ุบุฐุงุฆู ุตุญู ุจูุงุกู ุนูู ุงูุณุนุฑุงุช ุงูุญุฑุงุฑูุฉ ุงููุทููุจุฉ ูุงูููููุงุช ุงููุชุงุญุฉ ูู ุงููุฎุฒู.",
        backstory="ุฃุฎุตุงุฆู ุชุบุฐูุฉ ูุณุงุนุฏ ุงููุณุชุฎุฏููู ุนูู ุชุญููู ุฃูุฏุงููู ุงูุตุญูุฉ ูู ุฎูุงู ุชูุฏูู ูุฌุจุงุช ูุชูุงุฒูุฉ ุชุนุชูุฏ ุนูู ุงูุณุนุฑุงุช ุงูุญุฑุงุฑูุฉ ูุงูููููุงุช ุงููุชุงุญุฉ.",
        verbose=True,
        memory=True,
        tools=[run_rag, load_json_file]
    )

# ๐น ูููู 3: ุฅุฏุงุฑุฉ ุงููุฎุฒู ูุงูุฅุฌุงุจุฉ ุนู ุงูุฃุณุฆูุฉ ๐ฆ
def create_inventory_manager_agent():
    return Agent(
        role="Inventory Manager",
        goal="ุฅุฏุงุฑุฉ ุงููุฎุฒูุ ูุงูุฅุฌุงุจุฉ ุนูู ุงูุฃุณุฆูุฉ ุญูู ุงูููููุงุช ุงููุชุงุญุฉ ูุงูุชุฑุงุญ ุงูุจุฏุงุฆู.",
        backstory="ูุณุคูู ุนู ุฅุฏุงุฑุฉ ุงููุฎุฒู ููุฑุงูุจุฉ ุงูููููุงุช ุงููุชููุฑุฉุ ููููู ุจุชูุณูู ุจูุงูุงุช ุงููุฎุฒู ูุชููู ูุงุถุญุฉ ูุณููุฉ ุงููุฑุงุกุฉ.",
        verbose=True,
        memory=True,
        tools=[load_json_file]
    )

### โ ุฅูุดุงุก ุงูููุงู (Tasks)

# ๐น ูููุฉ 1: ุงูุจุญุซ ุนู ุงููุนูููุงุช ุงูุบุฐุงุฆูุฉ ูู ุงููุชุจ ๐
def create_food_info_task(agent):
    return Task(
        description="๐ฝ๏ธ ุงุณุชุฎุฑุงุฌ ูุนูููุงุช ุบุฐุงุฆูุฉ ุฏูููุฉ ุจูุงุกู ุนูู ุงููุชุจ ุงููุชุงุญุฉุ ูุน ุญุณุงุจ ุงูุณุนุฑุงุช ุงูุญุฑุงุฑูุฉ ุงููุทููุจุฉ.",
        expected_output="ูุนูููุงุช ุบุฐุงุฆูุฉ ุฏูููุฉ ุชุนุชูุฏ ุนูู ุงูุจูุงูุงุช ุงููุณุชุฎุฑุฌุฉ ูู ุงููุชุจ.",
        agent=agent,
        tools=[run_rag],
        inputs=["query"]
    )

# ๐น ูููุฉ 2: ุฅุนุฏุงุฏ ุฎุทุฉ ูุฌุจุงุช ูุชูุงุฒูุฉ ุจูุงุกู ุนูู ุงููุฎุฒูู ูุงูุณุนุฑุงุช ุงูุญุฑุงุฑูุฉ ๐
def create_meal_planning_task(agent, food_info_agent):
    return Task(
        description=(
            "๐ฝ๏ธ ูู ุจุญุณุงุจ ุงูุณุนุฑุงุช ุงูุญุฑุงุฑูุฉ ุงููุทููุจุฉ ุจูุงุกู ุนูู ุนูุฑ ููุฒู ุงููุณุชุฎุฏู ููุณุชูู ูุดุงุทู."
            " ุซู ุงุณุชุฎุฏู ูุฐู ุงููุนูููุงุช ูุฅูุดุงุก ูุธุงู ุบุฐุงุฆู ูููู ูุญุชูู ุนูู ูุฌุจุงุช ูุชูุงุฒูุฉ."
            " ุชุฃูุฏ ูู ุฃู ุงููุฌุจุงุช ุชุนุชูุฏ ุนูู ุงูููููุงุช ุงููุชุงุญุฉ ูู ุงููุฎุฒู ูุฏุฑ ุงูุฅููุงู."
            " ูุง ุชูู ุจุงุณุชุฏุนุงุก ุฃู ูููู ุฅุถุงูู ุจุนุฏ ุฐููุ ูู ููุท ุจุฅุฑุฌุงุน ุชูุฑูุฑ ููุณู ูุจุงุดุฑุฉ ูู Markdown."
            "\n\n"
            "๐ **ุชูุณูู ุงูุฅุฎุฑุงุฌ ุงููุทููุจ:**\n"
            "- ุฅุฌูุงูู ุงูุณุนุฑุงุช ุงูุญุฑุงุฑูุฉ ุงูููููุฉ ูู ุงูุจุฏุงูุฉ.\n"
            "- ุฌุฏูู ูุญุชูู ุนูู ุงููุฌุจุงุช ุงูุฑุฆูุณูุฉ **(ุงูุฅูุทุงุฑุ ุงูุบุฏุงุกุ ุงูุนุดุงุกุ ูุฌุจุงุช ุฎูููุฉ)**.\n"
            "- ุนุฏุฏ ุงูุณุนุฑุงุช ุงูุญุฑุงุฑูุฉ ููู ูุฌุจุฉ.\n"
            "- ุงูููููุงุช ุงููุณุชุฎุฏูุฉ ูู ูู ูุฌุจุฉ.\n"
            "- ูุงุฆูุฉ ุจุงูููููุงุช ุงููุงูุตุฉุ ุฅู ูุฌุฏุช.\n"
            "- ุงุณุชุฎุฏู **Markdown** ูุนุฑุถ ุงููุนูููุงุช ุจุทุฑููุฉ ูุงุถุญุฉ."
        ),
        expected_output="๐ ุชูุฑูุฑ ุงููุธุงู ุงูุบุฐุงุฆู ุงูููุงุฆู ูู Markdownุ ุฏูู ุงูุญุงุฌุฉ ุฅูู ุงุณุชุฏุนุงุก `Output Formatter`.",
        agent=agent,
        tools=[run_rag, load_json_file],  # โ ุชุญููู ุงููุนูููุงุช ูุงููุฎุฒูู ูุฑุฉ ูุงุญุฏุฉ ููุท
        inputs=["query"],
        depends_on=[food_info_agent]  # โ ูุนุชูุฏ ููุท ุนูู ุจูุงูุงุช `Food Info Agent`
    )

# ๐น ูููุฉ 3: ุฅุฏุงุฑุฉ ุงููุฎุฒู ูุนุฑุถ ุชูุฑูุฑู ๐ฆ
def create_inventory_task(agent):
    return Task(
        description="๐ฆ ุฃุฌุจ ุนูู ุงูุฃุณุฆูุฉ ุงููุชุนููุฉ ุจุงููุฎุฒู ูุงูููููุงุช ุงููุชุงุญุฉุ ููู ุจุนุฑุถ ุงูุจูุงูุงุช ุนูู ุดูู **ุฌุฏูู Markdown ููุณู**.",
        expected_output="๐ ุชูุฑูุฑ ุงููุฎุฒู ูุฌุฏูู Markdown ูุนุฑุถ ุงููููุงุช ูุงูููููุงุช ุงููุงูุตุฉ.",
        agent=agent,
        tools=[load_json_file],  # โ ุงุณุชุฏุนุงุก ุจูุงูุงุช ุงููุฎุฒู
        inputs=["query"]
    )



def detect_task_type(prompt):
    food_keywords = ["ุณุนุฑุงุช", "ูุฌุจุฉ", "ูุธุงู ุบุฐุงุฆู", "ุทุนุงู", "ุบุฐุงุก", "ุญููุฉ"]
    inventory_keywords = ["ูุฎุฒู", "ููููุงุช", "ุงููุชุงุญ", "ุงูููุชุฌุงุช", "ุงููุฎุฒูู"]

    prompt_lower = prompt.lower()

    if any(keyword in prompt_lower for keyword in food_keywords):
        return "food"
    elif any(keyword in prompt_lower for keyword in inventory_keywords):
        return "inventory"
    else:
        return "all"


### โ ุชุดุบูู CrewAI

def kickoff(prompt):
    task_type = detect_task_type(prompt)

    # โ ุฅูุดุงุก ุงููููุงุก ุงูุฃุณุงุณููู ููุท
    food_info_agent = create_food_info_agent()
    meal_planner_agent = create_meal_planner_agent()
    inventory_manager_agent = create_inventory_manager_agent()

    # โ ุฅูุดุงุก ุงูููุงู
    food_info_task = create_food_info_task(food_info_agent)
    meal_planning_task = create_meal_planning_task(meal_planner_agent, food_info_agent)
    inventory_task = create_inventory_task(inventory_manager_agent)

    # โ ุงุฎุชูุงุฑ ุงูููุงู ุจูุงุกู ุนูู ุงูููุน ุงูููุชุดู ุชููุงุฆููุง
    if task_type == "food":
        tasks = [food_info_task, meal_planning_task]  # โ ุงููุธุงู ุงูุบุฐุงุฆู ููุท
    elif task_type == "inventory":
        tasks = [inventory_task]  # โ ุชูุฑูุฑ ุงููุฎุฒู ููุท
    else:
        tasks = [food_info_task, meal_planning_task, inventory_task]  # โ ุชุดุบูู ุงููู ูู ูุด ูุงุถุญ

    # โ ุชุดุบูู CrewAI ุจุทุฑููุฉ ูุจุณุทุฉ
    pantry_crew = Crew(
        agents=[food_info_agent, meal_planner_agent, inventory_manager_agent],
        tasks=tasks,
        goal="ุชูุฏูู ูุธุงู ุบุฐุงุฆู ุตุญู ุจูุงุกู ุนูู ุงูุณุนุฑุงุช ุงูุญุฑุงุฑูุฉ ุงููุทููุจุฉ ูุฅุฏุงุฑุฉ ุงููุฎุฒูู ุจูุนุงููุฉ."
    )

    return pantry_crew.kickoff(inputs={"query": prompt})

